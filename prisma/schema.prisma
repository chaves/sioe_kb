// https://github.com/orgs/supabase/discussions/7659

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model User {
  id             String           @id @db.Uuid
  email          String           @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now()) @updatedAt
  profile        Profile?
  Document       Document[]
  CallSubmission CallSubmission[]
  Membership     Membership[]
  Payment        Payment[]
  Registration   Registration[]
  Reviewer      Reviewer?

  @@map("users")
}

model Profile {
  id                Int      @id @default(autoincrement())
  user_id           String   @unique @db.Uuid
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role              Role     @default(USER)
  first_name        String   @default("") @db.VarChar(255)
  last_name         String   @default("") @db.VarChar(255)
  university        String   @default("") @db.VarChar(255)
  picture           String   @default("") @db.VarChar(255)
  badge_name        String   @default("") @db.VarChar(255)
  badge_affiliation String   @default("") @db.VarChar(255)
  special_food      String   @default("") @db.VarChar(255)
  special_other     String   @default("") @db.VarChar(255)
  homepage          String   @default("") @db.VarChar(255)
  photo             String   @default("") @db.VarChar(255)
  bio               String   @default("") @db.Text()
  publications      String   @default("") @db.Text()
  country           Country? @relation(fields: [country_code], references: [code])
  country_code      String?  @db.VarChar(6)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([role, last_name])
  @@map("profiles")
}

model CallDiscipline {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  order            Int              @default(0)
  call_submissions CallSubmission[]

  @@map("call_disciplines")
}

model CallTopic {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  order            Int              @default(0)
  call_submissions CallSubmission[]

  @@map("call_topics")
}

model CallSubmission {
  id                 Int             @id @default(autoincrement())
  user               User            @relation(fields: [user_id], references: [id])
  user_id            String          @db.Uuid
  title              String          @db.VarChar(255)
  abstract           String          @db.Text()
  discipline         CallDiscipline? @relation(fields: [call_discipline_id], references: [id])
  call_discipline_id Int             @default(0)
  topic              CallTopic?      @relation(fields: [call_topic_id], references: [id])
  call_topic_id      Int             @default(0)
  accepted           Boolean         @default(false)
  notified           Boolean         @default(false)
  canceled           Boolean         @default(false)
  publish            Boolean         @default(true)
  comment            String?         @default("") @db.Text()
  notes              String?         @default("") @db.Text()
  CallAuthor         CallAuthor[]
  CallFile           CallFile[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([user_id])
  @@map("call_submissions")
}

model CallAuthor {
  id         Int     @id @default(autoincrement())
  first_name String  @db.VarChar(255)
  last_name  String  @db.VarChar(255)
  university String  @db.VarChar(255)
  presenter  Boolean @default(false)
  order      String

  call_submission    CallSubmission @relation(fields: [call_submission_id], references: [id], onDelete: Cascade)
  call_submission_id Int

  @@index([call_submission_id])
  @@map("call_authors")
}

model CallFile {
  id                 Int            @id @default(autoincrement())
  call_submission    CallSubmission @relation(fields: [call_submission_id], references: [id], onDelete: Cascade)
  call_submission_id Int
  file_name          String         @db.VarChar(255)
  file_size          Int

  @@index([call_submission_id])
  @@map("call_files")
}

model Reviewer {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [user_id], references: [id])
  user_id String  @db.Uuid @unique
  pc      Boolean @default(false)

  @@map("reviewers")
}

model Document {
  id          Int    @id @default(autoincrement())
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String @db.Uuid
  title       String @db.VarChar(255)
  description String @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([user_id])
  @@map("documents")
}

model Registration {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String   @db.Uuid
  payment       Payment? @relation(fields: [payment_id], references: [id])
  payment_id    Int?     @default(0)
  year          Int
  paid          Boolean  @default(false)
  gala          Boolean  @default(false)
  guest_name    String   @default("") @db.VarChar(255)
  guest_dietary String   @default("") @db.VarChar(255)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([user_id, payment_id, year])
  @@map("registrations")
}

model Membership {
  id         Int            @id @default(autoincrement())
  user       User           @relation(fields: [user_id], references: [id])
  user_id    String         @db.Uuid
  payment    Payment?       @relation(fields: [payment_id], references: [id])
  payment_id Int?           @default(0)
  year_start Int            @default(0)
  year_end   Int            @default(0)
  type       MembershipType

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([user_id, payment_id, year_start, year_end])
  @@map("memberships")
}

model Payment {
  id             Int    @id @default(autoincrement())
  user           User   @relation(fields: [user_id], references: [id])
  user_id        String @db.Uuid
  payer_id       String
  payer_email    String
  amount         String
  currency       String
  payment_status String

  membership   Membership[]
  registration Registration[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index([user_id])
  @@map("payments")
}

model Country {
  code String    @id @unique
  name String
  user Profile[]

  @@map("countries")
}

enum Role {
  ADMIN
  BOARD
  PC
  USER
}

enum MembershipType {
  Y
  Y3
}
